{"version":3,"sources":["serviceWorker.js","Demo.js","index.js"],"names":["Boolean","window","location","hostname","match","Demo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMouseMove","_ref","x","pageX","y","pageY","setState","handleTouchMove","_ref2","touches","getStyles","prevStyles","map","_","i","state","spring","presets","gentle","addEventListener","react_default","a","createElement","react_motion","defaultStyles","range","styles","balls","className","_ref3","key","concat","style","WebkitTransform","transform","zIndex","length","React","Component","ReactDOM","render","Demo_Demo","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+HCdeC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,gBAAkB,SAAAC,GAA4B,IAAlBC,EAAkBD,EAAzBE,MAAiBC,EAAQH,EAAfI,MAC7BZ,EAAKa,SAAS,CAAEJ,IAAGE,OAXFX,EAcnBc,gBAAkB,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACnBhB,EAAKO,gBAAgBS,EAAQ,KAfZhB,EAkBnBiB,UAAY,SAAAC,GAUV,OARiBA,EAAWC,IAAI,SAACC,EAAGC,GAClC,OAAa,IAANA,EACHrB,EAAKsB,MACL,CACEb,EAAGc,iBAAOL,EAAWG,EAAI,GAAGZ,EAAGe,UAAQC,QACvCd,EAAGY,iBAAOL,EAAWG,EAAI,GAAGV,EAAGa,UAAQC,YAvB/CzB,EAAKsB,MAAQ,CAAEb,EAAG,IAAKE,EAAG,KAFTX,mFAMjBN,OAAOgC,iBAAiB,YAAavB,KAAKI,iBAC1Cb,OAAOgC,iBAAiB,YAAavB,KAAKW,kDAyB1C,OACEa,EAAAC,EAAAC,cAACC,EAAA,gBAAD,CACEC,cAAeC,IAAM,GAAGb,IAAI,iBAAO,CAAEV,EAAG,EAAGE,EAAG,KAC9CsB,OAAQ9B,KAAKc,WAEZ,SAAAiB,GAAK,OACJP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACZD,EAAMf,IAAI,SAAAiB,EAAWf,GAAX,IAAGZ,EAAH2B,EAAG3B,EAAGE,EAANyB,EAAMzB,EAAN,OACTgB,EAAAC,EAAAC,cAAA,OACEQ,IAAKhB,EACLc,UAAS,mBAAAG,OAAqBjB,GAC9BkB,MAAO,CACLC,gBAAe,eAAAF,OAAiB7B,EAAI,GAArB,QAAA6B,OAA8B3B,EAAI,GAAlC,UACf8B,UAAS,eAAAH,OAAiB7B,EAAI,GAArB,QAAA6B,OAA8B3B,EAAI,GAAlC,UACT+B,OAAQR,EAAMS,OAAStB,iBA/CPuB,IAAMC,WCCxCC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAUC,SAASC,cAAc,aF4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec700c20.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { StaggeredMotion, spring, presets } from 'react-motion'\nimport range from 'lodash.range'\n\nexport default class Demo extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { x: 250, y: 300 }\n  }\n\n  componentDidMount() {\n    window.addEventListener('mousemove', this.handleMouseMove)\n    window.addEventListener('touchmove', this.handleTouchMove)\n  }\n\n  handleMouseMove = ({ pageX: x, pageY: y }) => {\n    this.setState({ x, y })\n  }\n\n  handleTouchMove = ({ touches }) => {\n    this.handleMouseMove(touches[0])\n  }\n\n  getStyles = prevStyles => {\n    // `prevStyles` is the interpolated value of the last tick\n    const endValue = prevStyles.map((_, i) => {\n      return i === 0\n        ? this.state\n        : {\n            x: spring(prevStyles[i - 1].x, presets.gentle),\n            y: spring(prevStyles[i - 1].y, presets.gentle),\n          }\n    })\n    return endValue\n  }\n\n  render() {\n    return (\n      <StaggeredMotion\n        defaultStyles={range(6).map(() => ({ x: 0, y: 0 }))}\n        styles={this.getStyles}\n      >\n        {balls => (\n          <div className=\"demo1\">\n            {balls.map(({ x, y }, i) => (\n              <div\n                key={i}\n                className={`demo1-ball ball-${i}`}\n                style={{\n                  WebkitTransform: `translate3d(${x - 25}px, ${y - 25}px, 0)`,\n                  transform: `translate3d(${x - 25}px, ${y - 25}px, 0)`,\n                  zIndex: balls.length - i,\n                }}\n              />\n            ))}\n          </div>\n        )}\n      </StaggeredMotion>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport Demo from './Demo'\n\nReactDOM.render(<Demo />, document.querySelector('#content'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}